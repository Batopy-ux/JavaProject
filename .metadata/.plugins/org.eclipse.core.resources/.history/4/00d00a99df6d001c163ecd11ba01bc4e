package com.transaction.transaction.service;

import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.transaction.transaction.model.Transaction;
import com.transaction.transaction.transactionrepository.TransactionRepository;

/**
 * Service layer for Transaction.
 * @author prath
 *
 */
@Service
public class TransactionService {

	Logger log = LoggerFactory.getLogger(TransactionService.class);
	
	@Autowired
	private TransactionRepository transactionRepository;
	
	/**
	 * Method to find transaction by Id.
	 * @param tranId
	 * @return  
	 */
	public Optional<Transaction> getTransactionById(Integer tranId) {
		return transactionRepository.findById(tranId);
	}
	
	/**
	 * Method to update account balance
	 * @param tran
	 * @return transaction
	 */
	public Transaction updateAccountBal(Transaction tran) {
		if(tran.getType() == "Credit") {
			double temp = tran.getAccountBal();
			temp = temp + tran.getAmt();
			tran.setAccountBal(temp);
			return tran;
		}else if(tran.getType() == "Debit") {
			double temp = tran.getAccountBal();
			temp = temp - tran.getAmt();
			tran.setAccountBal(temp);
			return tran;
		}else {
			System.out.println("Invalid Transaction Type");
			return null;
		}
	}
	
	/**
	 * Update account balance and add new transaction
	 * @param tran
	 * @return Transaction
	 */
	public Transaction addTransaction(Transaction tran) {
		if(tran.getType() == "Credit") {
			double temp = tran.getAccountBal();
			temp = temp + tran.getAmt();
			tran.setAccountBal(temp);
			return transactionRepository.save(tran);
		}else if(tran.getType() == "Debit") {
			double temp = tran.getAccountBal();
			temp = temp - tran.getAmt();
			tran.setAccountBal(temp);
			return transactionRepository.save(tran);
	}
	
	/**
	 * Method to delete a failed transaction and revert account balance
	 * @param tran
	 */
	public void deletefailedTransaction(Integer tranId) {
		if(transactionRepository.existsById(tranId)) {
		Transaction tran = transactionRepository.getById(tranId);
		if(tran.getType() == "Credit") {
			double temp = tran.getAccountBal();
			temp = temp - tran.getAmt();
			tran.setAccountBal(temp);
			transactionRepository.deleteById(tranId);
			
		}else if(tran.getType() == "Debit") {
			double temp = tran.getAccountBal();
			temp = temp + tran.getAmt();
			tran.setAccountBal(temp);
			transactionRepository.deleteById(tranId);
			
		}}
		else
		{
		System.out.println("Transaction with Id" +tranId + "does not exist.");	
	}}
	
	
	/**
	 * List out all the transaction
	 * @return List of Transactions
	 */
	public List<Transaction> getTransactions(){
		return transactionRepository.findAll();
	}
	
}
