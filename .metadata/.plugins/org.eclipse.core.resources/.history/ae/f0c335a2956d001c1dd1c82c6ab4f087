package com.transaction.transaction.service;

import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.transaction.transaction.model.Transaction;
import com.transaction.transaction.transactionrepository.TransactionRepository;

@Service
public class TransactionService {

	Logger log = LoggerFactory.getLogger(TransactionService.class);
	
	@Autowired
	private TransactionRepository transactionRepository;
	
	public Optional<Transaction> getTransactionById(Integer tranId) {
		return transactionRepository.findById(tranId);
	}
	
	public Transaction updateAccountBal(Transaction tran) {
		if(tran.getType() == "Credit") {
			double temp = tran.getAccountBal();
			temp = temp + tran.getAmt();
			tran.setAccountBal(temp);
			return tran;
		}else if(tran.getType() == "Debit") {
			double temp = tran.getAccountBal();
			temp = temp - tran.getAmt();
			tran.setAccountBal(temp);
			return tran;
		}else {
			System.out.println("Invalid Transaction Type");
			return null;
		}
	}
	
	public Transaction addTransaction(Transaction tran) {
		Transaction tempTran = updateAccountBal(tran);
		return transactionRepository.save(tempTran);
	}
	
	public void deletefailedTransaction(Transaction tran) {
		if(tran.getType() == "Credit") {
			double temp = tran.getAccountBal();
			temp = temp - tran.getAmt();
			tran.setAccountBal(temp);
			transactionRepository.delete(tran);
		}else if(tran.getType() == "Debit") {
			double temp = tran.getAccountBal();
			temp = temp + tran.getAmt();
			tran.setAccountBal(temp);
			transactionRepository.delete(tran);
		}else {
			System.out.println("Invalid Transaction Type");
			
		}
	}
	
	public List<Transaction> getTransactions(){
		return transactionRepository.findAll();
	}
	
}
